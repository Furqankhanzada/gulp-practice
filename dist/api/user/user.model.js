"use strict";var mongoose=require("mongoose"),Schema=mongoose.Schema,crypto=require("crypto"),UserSchema=new Schema({userName:String,email:{type:String,lowercase:!0},role:{type:String,"default":"subscriber"},hashedPassword:String,provider:String,salt:String,image:String,firstName:String,lastName:String,mobile:Number,age:Number,city:String,country:String,gender:Number,company:String,designation:String,website:String,state:String,description:String});UserSchema.virtual("password").set(function(e){this._password=e,this.salt=this.makeSalt(),this.hashedPassword=this.encryptPassword(e)}).get(function(){return this._password}),UserSchema.virtual("profile").get(function(){return{name:this.name,role:this.role}}),UserSchema.virtual("token").get(function(){return{_id:this._id,role:this.role}}),UserSchema.path("email").validate(function(e){return e.length},"Email cannot be blank"),UserSchema.path("hashedPassword").validate(function(e){return e.length},"Password cannot be blank"),UserSchema.path("email").validate(function(e,t){var r=this;this.constructor.findOne({email:e},function(e,s){if(e)throw e;return s?t(r.id===s.id?!0:!1):void t(!0)})},"The specified email address is already in use.");var validatePresenceOf=function(e){return e&&e.length};UserSchema.pre("save",function(e){return this.isNew?void(validatePresenceOf(this.hashedPassword)?e():e(new Error("Invalid password"))):e()}),UserSchema.methods={authenticate:function(e){return this.encryptPassword(e)===this.hashedPassword},makeSalt:function(){return crypto.randomBytes(16).toString("base64")},encryptPassword:function(e){if(!e||!this.salt)return"";var t=new Buffer(this.salt,"base64");return crypto.pbkdf2Sync(e,t,1e4,64).toString("base64")}},module.exports=mongoose.model("User",UserSchema);